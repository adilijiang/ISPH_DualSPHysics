#DualSPHysics CPU v4 (28-03-2016)

#=============== Compilation Options ===============
USE_DEBUG=NO
USE_FAST_MATH=YES
USE_NATIVE_CPU_OPTIMIZATIONS=YES

EXECS_DIRECTORY=../../../EXECS

ifeq ($(USE_DEBUG), YES)
  CCFLAGS=-c -O0 -g -Wall -fopenmp
else
  CCFLAGS=-c -O3 -fopenmp
  ifeq ($(USE_FAST_MATH), YES)
    CCFLAGS+= -ffast-math
  endif
  ifeq ($(USE_NATIVE_CPU_OPTIMIZATIONS), YES)
    CCFLAGS+= -march=native
  endif
endif
CC=g++
CCLINKFLAGS=-fopenmp -lgomp

#=============== Files to compile ===============
OBJ_BASIC=main.o Functions.o FunctionsMath.o JArraysCpu.o JBinaryData.o JCellDivCpu.o JCfgRun.o JException.o
OBJ_BASIC:=$(OBJ_BASIC) JLog2.o JObject.o JPartDataBi4.o JPartFloatBi4.o JPartOutBi4Save.o JPartsOut.o 
OBJ_BASIC:=$(OBJ_BASIC) JRadixSort.o JRangeFilter.o JReadDatafile.o JSaveDt.o JSpaceCtes.o JSpaceEParms.o JSpaceParts.o 
OBJ_BASIC:=$(OBJ_BASIC) JSpaceProperties.o JSph.o JSphAccInput.o JSphCpu.o JSphDtFixed.o JSphVisco.o randomc.o
OBJ_BASIC:=$(OBJ_BASIC) JTimeOut.o
OBJ_CPU_SINGLE=JCellDivCpuSingle.o JSphCpuSingle.o JPartsLoad4.o
OBJECTS=$(OBJ_BASIC) $(OBJ_CPU_SINGLE)

#=============== DualSPHysics libs to be included ===============
JLIBS=-L./ -ljxml_64 -ljformatfiles2_64 -ljsphmotion_64 -ljwavegen_64

#=============== CPU Code Compilation ===============
all:$(EXECS_DIRECTORY)/DualSPHysics4CPU_linux64 
	rm -rf *.o
ifeq ($(USE_DEBUG), NO)
	@echo "  --- Compiled Release CPU version ---"	
else
	@echo "  --- Compiled Debug CPU version ---"
	mv DualSPHysics4CPU_linux64 DualSPHysics4CPU_linux64_debug
endif

$(EXECS_DIRECTORY)/DualSPHysics4CPU_linux64:  $(OBJECTS)
	$(CC) $(OBJECTS) $(CCLINKFLAGS) -o $@ $(JLIBS)

.cpp.o: 
	$(CC) $(CCFLAGS) $< 

clean:
	rm -rf *.o DualSPHysics4CPU_linux64 DualSPHysics4CPU_linux64_debug
